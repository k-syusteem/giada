#include <samplerate.h>
#include "const.h"
#include "conf.h"
#include "wave.h"
#include "clock.h"
#include "kernelAudio.h"
#include "sampleChannel.h"
#include "audioProc.h"


namespace giada {
namespace m {
namespace audioProc
{
namespace
{
SRC_STATE* rsmp_state;


/* -------------------------------------------------------------------------- */


int fillBuffer(SampleChannel* ch, giada::m::AudioBuffer& dest, int start, 
	int offset, bool rewind=true)
{
	SRC_DATA src_data;

	src_data.data_in       = ch->wave->getFrame(start);   // source data
	src_data.input_frames  = ch->getEnd() - start;        // how many readable frames
	src_data.data_out      = dest[offset];                // destination (processed data)
	src_data.output_frames = dest.countFrames() - offset; // how many frames to process
	src_data.end_of_input  = false;

	src_process(rsmp_state, &src_data);

	int position = start + src_data.input_frames_used; // position goes forward of frames_used (i.e. read from wave)

	if (rewind) {
		int gen = src_data.output_frames_gen;            // frames generated by this call
		if (gen == dest.countFrames() - offset)
			ch->frameRewind = -1;
		else
			ch->frameRewind = gen + offset;
	}
	return position;
}


/* -------------------------------------------------------------------------- */


void rewind(SampleChannel* ch, int localFrame)
{
	ch->tracker = ch->begin;
	ch->mute_i  = false;
	ch->qWait   = false;  // Was in qWait mode? Reset occured, no more qWait now.

	/* On reset, if frame > 0 and in play, fill again pChan to create something 
	like this:

		|abcdefabcdefab*abcdefabcde|
		[old data-----]*[new data--] */

	if (localFrame > 0 && ch->status & (STATUS_PLAY | STATUS_ENDING))
		ch->tracker = fillBuffer(ch, ch->vChan, ch->tracker, localFrame);
}


/* -------------------------------------------------------------------------- */


/* TODO isUserGenerated is always false*/
/* TODO join doQuantize, forceStart into one parameter */
void start(SampleChannel* ch, int localFrame, bool doQuantize, bool forceStart, 
	bool isUserGenerated)
{
	switch (ch->status)	{
		case STATUS_EMPTY:
		case STATUS_MISSING:
		case STATUS_WRONG:
		{
			return;
		}
		case STATUS_OFF:
		{
			if (ch->mode & LOOP_ANY) {
				if (forceStart) {
					ch->status  = STATUS_PLAY;
					ch->tracker = localFrame;
				}
				else
					ch->status = STATUS_WAIT;
				ch->sendMidiLplay();   /* MIDI TODO ********** */
			}
			else {
				if (clock::getQuantize() > 0 && clock::isRunning() && doQuantize)
					ch->qWait = true;
				else {
					ch->status = STATUS_PLAY;
					ch->sendMidiLplay();   /* MIDI TODO ********** */

					/* Do fillChan only if this is not a user-generated event (i.e. is an
					action read by Mixer). Otherwise clear() will take take of calling
					fillChan on the next cycle. */

					if (!isUserGenerated)
						ch->tracker = fillBuffer(ch, ch->vChan, ch->tracker, localFrame);
				}
			}
			break;
		}
		case STATUS_PLAY:
		{
			if (ch->mode == SINGLE_BASIC)
				ch->setFadeOut(SampleChannel::DO_STOP);
			else
			if (ch->mode == SINGLE_RETRIG) {
				if (clock::getQuantize() > 0 && clock::isRunning() && doQuantize)
					ch->qWait = true;
				else
					rewind(ch, localFrame);
			}
			else
			if (ch->mode & (LOOP_ANY | SINGLE_ENDLESS)) {
				ch->status = STATUS_ENDING;
				ch->sendMidiLplay();   /* MIDI TODO ********************/
			}
			break;
		}
		case STATUS_WAIT:
		{
			ch->status = STATUS_OFF;
			ch->sendMidiLplay();   /* MIDI TODO ********************/
			break;
		}
		case STATUS_ENDING:
		{
			ch->status = STATUS_PLAY;
			ch->sendMidiLplay();   /* MIDI TODO ********************/
			break;
		}
	}
}


/* -------------------------------------------------------------------------- */


void hardStop(SampleChannel* ch, int localFrame)
{
	if (localFrame != 0)        
		ch->vChan.clear(localFrame); // clear data in range [localFrame, [end]]
	ch->status = STATUS_OFF;
	ch->sendMidiLplay();/* MIDI TODO ********** */
	rewind(ch, localFrame);
}


/* -------------------------------------------------------------------------- */


void kill(SampleChannel* ch, int localFrame)
{
	if (ch->wave != nullptr && ch->status != STATUS_OFF) {
		if (ch->mute || ch->mute_i || (ch->status == STATUS_WAIT && ch->mode & LOOP_ANY))
			hardStop(ch, localFrame);
		else
			ch->setFadeOut(SampleChannel::DO_STOP);
	}
}


/* -------------------------------------------------------------------------- */


void stop(SampleChannel* ch)
{
	if (ch->mode == SINGLE_PRESS && ch->status == STATUS_PLAY) {
		if (ch->mute || ch->mute_i)
			hardStop(ch, 0);  /// FIXME - wrong frame value
		else
			ch->setFadeOut(SampleChannel::DO_STOP);
	}
	else  // stop a SINGLE_PRESS immediately, if the quantizer is on
	if (ch->mode == SINGLE_PRESS && ch->qWait == true)
		ch->qWait = false;
}


/* -------------------------------------------------------------------------- */


void quantize(SampleChannel* ch, int index, int localFrame, int globalFrame)
{
	/* skip if LOOP_ANY or not in quantizer-wait mode */

	if ((ch->mode & LOOP_ANY) || !ch->qWait)
		return;

	/* no fadeout if the sample starts for the first time (from a
	 * STATUS_OFF), it would be meaningless. */

	if (ch->status == STATUS_OFF) {
		ch->status  = STATUS_PLAY;
		ch->sendMidiLplay(); /* MIDI TODO ********** */
		ch->qWait   = false;
		ch->tracker = fillBuffer(ch, ch->vChan, ch->tracker, localFrame); /// FIXME: ???
	}
	else
		rewind(ch, localFrame);

	/* Now we record the keypress, if the quantizer is on. SINGLE_PRESS needs 
	overdub. */

	if (recorder::canRec(ch, clock::isRunning(), mixer::recording)) {
		if (ch->mode == SINGLE_PRESS) {
			recorder::startOverdub(index, G_ACTION_KEYS, globalFrame, 
				kernelAudio::getRealBufSize());
			ch->readActions = false;   // don't read actions while overdubbing
		}
		else
			recorder::rec(index, G_ACTION_KEYPRESS, globalFrame);
		ch->hasActions = true;
	}	
}


/* -------------------------------------------------------------------------- */


void onBar(SampleChannel* ch, int localFrame)
{
	if (ch->mode == LOOP_REPEAT) {
		if (ch->status == STATUS_PLAY)
			rewind(ch, localFrame);
	}
	else
	if (ch->mode == LOOP_ONCE_BAR) {
		if (ch->status == STATUS_WAIT) {
			ch->status  = STATUS_PLAY;
			ch->tracker = fillBuffer(ch, ch->vChan, ch->tracker, localFrame);
			ch->sendMidiLplay(); /* MIDI TODO ********** */
		}
	}	
}


/* -------------------------------------------------------------------------- */


void setReadActions(SampleChannel* ch, bool v)
{
	ch->readActions = v;
	if (!ch->readActions && conf::recsStopOnChanHalt)
		kill(ch, 0); // FIXME - wrong frame value
}


/* -------------------------------------------------------------------------- */


void onFirstBeat(SampleChannel* ch, int localFrame)
{
	if (ch->wave == nullptr)
		return;

	if (ch->mode & LOOP_ANY) {

		/* FIXME - Should do a crossfade if the sample is playing. Regular ch->reset
		instead if it's muted, otherwise a click occurs. */

		if (ch->status == STATUS_PLAY)
			rewind(ch, localFrame);
		else
		if (ch->status == STATUS_ENDING)
			hardStop(ch, localFrame);
	}

	if (ch->status == STATUS_WAIT) { /// FIXME - should be inside previous if!
		ch->status  = STATUS_PLAY;
		ch->sendMidiLplay(); /* MIDI TODO ********** */
		ch->tracker = fillBuffer(ch, ch->vChan, ch->tracker, localFrame);
	}

	if (ch->recStatus == REC_ENDING) {
		ch->recStatus = REC_STOPPED;
		setReadActions(ch, false);  // rec stop
	}
	else
	if (ch->recStatus == REC_WAITING) {
		ch->recStatus = REC_READING;
		setReadActions(ch, true);   // rec start
	}	
}


/* -------------------------------------------------------------------------- */


void setMute(SampleChannel* ch, bool internal)
{
	if (internal) {

		/* global mute is on? don't waste time with fadeout, just mute it
		 * internally */

		if (ch->mute)
			ch->mute_i = true;
		else {
			if (ch->isPlaying())
				ch->setFadeOut(SampleChannel::DO_MUTE_I);
			else
				ch->mute_i = true;
		}
	}
	else {

		/* internal mute is on? don't waste time with fadeout, just mute it
		 * globally */

		if (ch->mute_i)
			ch->mute = true;
		else {

			/* sample in play? fadeout needed. Else, just mute it globally */

			if (ch->isPlaying())
				ch->setFadeOut(SampleChannel::DO_MUTE);
			else
				ch->mute = true;
		}
	}

	ch->sendMidiLmute(); /* MIDI TODO ********** */
}


/* -------------------------------------------------------------------------- */


void unsetMute(SampleChannel* ch, bool internal)
{
	if (internal) {
		if (ch->mute)
			ch->mute_i = false;
		else {
			if (ch->isPlaying())
				ch->setFadeIn(internal);
			else
				ch->mute_i = false;
		}
	}
	else {
		if (ch->mute_i)
			ch->mute = false;
		else {
			if (ch->isPlaying())
				ch->setFadeIn(internal);
			else
				ch->mute = false;
		}
	}

	ch->sendMidiLmute(); /* MIDI TODO ********** */
}


/* -------------------------------------------------------------------------- */


void calcVolumeEnv(SampleChannel* ch, int globalFrame)
{
	/* method: check this frame && next frame, then calculate delta */

	recorder::action* a0 = nullptr;
	recorder::action* a1 = nullptr;
	int res;

	/* get this action on frame 'frame'. It's unlikely that the action
	 * is not found. */

	res = recorder::getAction(ch->index, G_ACTION_VOLUME, globalFrame, &a0);
	if (res == 0)
		return;

	/* get the action next to this one.
	 * res == -1: a1 not found, this is the last one. Rewind the search
	 * and use action at frame number 0 (actions[0]).
	 * res == -2 G_ACTION_VOLUME not found. This should never happen */

	res = recorder::getNextAction(ch->index, G_ACTION_VOLUME, globalFrame, &a1);

	if (res == -1)
		res = recorder::getAction(ch->index, G_ACTION_VOLUME, 0, &a1);

	ch->volume_i = a0->fValue;
	ch->volume_d = ((a1->fValue - a0->fValue) / (a1->frame - a0->frame)) * 1.003f;
}


/* -------------------------------------------------------------------------- */


void parseAction(SampleChannel* ch, recorder::action a, int localFrame, 
	int globalFrame)
{
	if (ch->readActions == false)
		return;

	switch (a.type) {
		case G_ACTION_KEYPRESS:
			if (ch->mode & SINGLE_ANY)
				start(ch, localFrame, false, false, false);
			break;
		case G_ACTION_KEYREL:
			if (ch->mode & SINGLE_ANY)
				stop(ch);
			break;
		case G_ACTION_KILL:
			if (ch->mode & SINGLE_ANY)
				kill(ch, localFrame);
			break;
		case G_ACTION_MUTEON:
			setMute(ch, true);   // internal mute
			break;
		case G_ACTION_MUTEOFF:
			unsetMute(ch, true); // internal mute
			break;
		case G_ACTION_VOLUME:
			calcVolumeEnv(ch, globalFrame);
			break;
	}
}


/* -------------------------------------------------------------------------- */


void sum(SampleChannel* ch, int localFrame)
{
	if (ch->wave == nullptr || ch->status & ~(STATUS_PLAY | STATUS_ENDING))
		return;

	if (localFrame != ch->frameRewind) {

		/* volume envelope, only if seq is running */

		if (clock::isRunning()) {
			ch->volume_i += ch->volume_d;
			if (ch->volume_i < 0.0f)
				ch->volume_i = 0.0f;
			else
			if (ch->volume_i > 1.0f)
				ch->volume_i = 1.0f;
		}

		/* fadein or fadeout processes. If mute, delete any signal. */

		/** TODO - big issue: fade[in/out]Vol * internal_volume might be a
		 * bad choice: it causes glitches when muting on and off during a
		 * volume envelope. */

		if (ch->mute || ch->mute_i) {
			for (int i=0; i<ch->vChan.countChannels(); i++)
				ch->vChan[localFrame][i] = 0.0f;
		}
		else
		if (ch->fadeinOn) {
			if (ch->fadeinVol < 1.0f) {
				for (int i=0; i<ch->vChan.countChannels(); i++)
					ch->vChan[localFrame][i] *= ch->fadeinVol * ch->volume_i;
				ch->fadeinVol += 0.01f;
			}
			else {
				ch->fadeinOn  = false;
				ch->fadeinVol = 0.0f;
			}
		}
		else
		if (ch->fadeoutOn) {
			if (ch->fadeoutVol > 0.0f) { // fadeout ongoing
				if (ch->fadeoutType == SampleChannel::XFADE) {
					for (int i=0; i<ch->vChan.countChannels(); i++)
						ch->vChan[localFrame][i] = ch->pChan[localFrame][i] * ch->fadeoutVol * ch->volume_i;
				}
				else {
					for (int i=0; i<ch->vChan.countChannels(); i++)
						ch->vChan[localFrame][i] *= ch->fadeoutVol * ch->volume_i;
				}
				ch->fadeoutVol -= ch->fadeoutStep;
			}
			else {  // fadeout end
				ch->fadeoutOn  = false;
				ch->fadeoutVol = 1.0f;

				/* QWait ends with the end of the xfade */

				if (ch->fadeoutType == SampleChannel::XFADE) {
					ch->qWait = false;
				}
				else {
					if (ch->fadeoutEnd == SampleChannel::DO_MUTE)
						ch->mute = true;
					else
					if (ch->fadeoutEnd == SampleChannel::DO_MUTE_I)
						ch->mute_i = true;
					else             // DO_STOP
						hardStop(ch, localFrame);
				}
			}
		}
		else {
			for (int i=0; i<ch->vChan.countChannels(); i++)
				ch->vChan[localFrame][i] *= ch->volume_i;
		}
	}
	else { // at this point the sample has reached the end */

		if (ch->mode & (SINGLE_BASIC | SINGLE_PRESS | SINGLE_RETRIG) ||
			 (ch->mode == SINGLE_ENDLESS && ch->status == STATUS_ENDING)   ||
			 (ch->mode & LOOP_ANY && !clock::isRunning()))     // stop loops when the seq is off
		{
			ch->status = STATUS_OFF;
			ch->sendMidiLplay();/* MIDI TODO ********** */
		}

		/* LOOP_ONCE or LOOP_ONCE_BAR: if ending (i.e. the user requested their
		 * termination), kill 'em. Let them wait otherwise. But don't put back in
		 * wait mode those already stopped by the conditionals above. */

		if (ch->mode & (LOOP_ONCE | LOOP_ONCE_BAR)) {
			if (ch->status == STATUS_ENDING)
				ch->status = STATUS_OFF;
			else
			if (ch->status != STATUS_OFF)
				ch->status = STATUS_WAIT;
		}

		/* Check for end of samples. SINGLE_ENDLESS runs forever unless it's in 
		ENDING mode. */

		rewind(ch, localFrame);
	}
}
}; // {anonymous}


/* -------------------------------------------------------------------------- */
/* -------------------------------------------------------------------------- */
/* -------------------------------------------------------------------------- */


void prepare(SampleChannel* ch, mixer::FrameEvents ev)
{

}
}}};